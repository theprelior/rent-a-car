generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Car {
  id               BigInt     @id @default(autoincrement())
  marka            String
  model            String
  yil              Int
  yakitTuru        YakitTuru  @map("yakit_turu")
  vitesTuru        VitesTuru  @map("vites_turu")
  motorHacmi       Decimal?   @map("motor_hacmi") @db.Decimal(3, 1)
  beygirGucu       Int?       @map("beygir_gucu")
  renk             String?
  kapiSayisi       Int?       @map("kapi_sayisi") @db.SmallInt
  koltukSayisi     Int?       @map("koltuk_sayisi") @db.SmallInt
  kasaTipi         KasaTipi?  @map("kasa_tipi")
  cekisTipi        CekisTipi? @map("cekis_tipi")
  plaka            String?    @unique
  sasiNo           String     @unique @map("sasi_no")
  basePrice        Decimal     @map("base_price") @db.Decimal(10, 2) @default(0)
  
  // --- DEĞİŞİKLİK 2: Yeni fiyat aralıkları ilişkisi eklendi ---
  pricingTiers     PricingTier[]
  
  category         CarCategory @default(EKONOMIK)


  kilometre        Int?
  durum            Durum?
  donanimPaketi    String?    @map("donanim_paketi")
  ekstraOzellikler String[]   @map("ekstra_ozellikler")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  imageUrl         String?    @map("image_url")
  previewVideoUrl String?   @map("preview_video_url") // <-- YENİ ALAN

  locationId       Int?       @map("location_id")
  bagajSayisi      Int?       @map("bagaj_sayisi") @db.SmallInt
  location         Location?  @relation(fields: [locationId], references: [id])
  bookings         Booking[]

  @@map("arabalar")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Role      @default(USER)
  phone         String?
  adress        String?
  dateOfBirth   DateTime? @db.Timestamptz(6)
  accounts      Account[]
  bookings      Booking[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cars      Car[]

  @@map("lokasyonlar")
}

model Booking {
  id        Int      @id @default(autoincrement())
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  carId     BigInt   @map("car_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // --- DEĞİŞİKLİKLER ---
  // 1. userId artık opsiyonel. Rezervasyon bir üyeye ait olmayabilir.
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  car       Car      @relation(fields: [carId], references: [id])
  guestName   String? @map("guest_name")
  guestPhone  String? @map("guest_phone")
  guestEmail  String? @map("guest_email")
  
  totalPrice Decimal?       @db.Decimal(10, 2)
  status     BookingStatus? @default(PENDING)
  notes      String?       @db.Text

  @@map("rezervasyonlar")
}

enum BookingStatus {
  PENDING    // Onay Bekliyor
  CONFIRMED  // Onaylandı
  CANCELLED  // İptal Edildi
  COMPLETED  // Tamamlandı
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contact_messages")
}

enum YakitTuru {
  Benzin
  Dizel
  Elektrik
  Hibrit
  LPG
}

enum VitesTuru {
  Manuel
  Otomatik
  Yari_Otomatik
}

enum KasaTipi {
  Sedan
  Hatchback
  SUV
  Pickup
  Coupe
}

enum CekisTipi {
  Onden_cekis
  Arkadan_itis
  Dort_ceker
  AWD
}

enum Durum {
  Sifir
  Ikinci_El
  Kiralik
}

enum Role {
  USER
  ADMIN
}

// --- YENİ MODEL: Fiyat Aralığı Modeli ---
model PricingTier {
  id         Int      @id @default(autoincrement())
  minDays    Int      @map("min_days") // Bu fiyatın geçerli olduğu minimum gün sayısı
  maxDays    Int      @map("max_days") // Bu fiyatın geçerli olduğu maksimum gün sayısı
  dailyRate  Decimal  @map("daily_rate") @db.Decimal(10, 2) // Bu aralıktaki günlük ücret

  carId      BigInt   @map("car_id")
  car        Car      @relation(fields: [carId], references: [id], onDelete: Cascade) // Araç silinince fiyat aralıkları da silinsin

  @@map("pricing_tiers")
}

model Extra {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Örn: "Mini Hasar Sigortası"
  description String?  @db.Text // Ekstra hakkında kısa bir açıklama
  price       Decimal  @db.Decimal(10, 2) // Ekstranın günlük ücreti
  isDaily     Boolean  @default(true) @map("is_daily") // Ücret günlük mü, tek seferlik mi?
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("extras")
}

enum CarCategory {
  EKONOMIK
  ORTA_SINIF
  UST_SINIF
  VIP
  SUV
  MINIBUS
}