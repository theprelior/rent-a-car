// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Araç modeli - senin listene göre oluşturuldu
model Car {
  id               BigInt      @id @default(autoincrement())
  marka            String
  model            String
  yil              Int
  yakitTuru        YakitTuru   @map("yakit_turu")
  vitesTuru        VitesTuru   @map("vites_turu")
  motorHacmi       Decimal?    @map("motor_hacmi") @db.Decimal(3, 1) // Örn: 1.6, 2.0 için
  beygirGucu       Int?        @map("beygir_gucu")
  renk             String?
  kapiSayisi       Int?        @map("kapi_sayisi") @db.SmallInt
  koltukSayisi     Int?        @map("koltuk_sayisi") @db.SmallInt
  bagajSayisi      Int?        @map("bagaj_sayisi") @db.SmallInt // <-- BU SATIRI EKLE
  kasaTipi         KasaTipi?   @map("kasa_tipi")
  cekisTipi        CekisTipi?  @map("cekis_tipi")
  plaka            String?     @unique
  sasiNo           String      @unique @map("sasi_no")
  fiyat            Decimal?    @db.Decimal(10, 2) // Para birimi için Decimal en iyisidir
  kilometre        Int?
  durum            Durum?
  donanimPaketi    String?     @map("donanim_paketi")
  ekstraOzellikler String[]    @map("ekstra_ozellikler") // Sunroof, navigasyon gibi özellikler için dizi
  imageUrl         String?     @map("image_url") // <-- BU SATIRI EKLE
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  locationId       Int?        @map("location_id")
  location         Location?   @relation(fields: [locationId], references: [id])
  
  // Bir arabanın birden çok rezervasyonu olabilir
  bookings         Booking[]
  @@map("arabalar") // Veritabanındaki tablo adının "arabalar" olmasını sağlar
}

// ENUM tanımları - belirli seçenekler için
enum YakitTuru {
  Benzin
  Dizel
  Elektrik
  Hibrit
  LPG
}

enum VitesTuru {
  Manuel
  Otomatik
  Yari_Otomatik
}

enum KasaTipi {
  Sedan
  Hatchback
  SUV
  Pickup
  Coupe
}

enum CekisTipi {
  Onden_cekis
  Arkadan_itis
  Dort_ceker // 4x4
  AWD
}

enum Durum {
  Sifir
  Ikinci_El
  Kiralik
}



// NextAuth.js için GEREKLİ MODELLER
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Location {
  id      Int     @id @default(autoincrement())
  name    String  @unique // Örn: "Adana Havalimanı", "İskenderun Merkez"
  address String?

  // Bir lokasyonda birden çok araba olabilir
  cars    Car[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("lokasyonlar")
}

// YENİ MODEL: Rezervasyonlar
model Booking {
  id        Int      @id @default(autoincrement())
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")

  // Her rezervasyon bir arabaya aittir
  carId     BigInt   @map("car_id")
  car       Car      @relation(fields: [carId], references: [id])
  
  // TODO: Gelecekte buraya rezervasyonu yapan kullanıcının ID'si eklenecek
  // userId    String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("rezervasyonlar")
}


model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contact_messages")
}